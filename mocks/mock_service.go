// Code generated by MockGen. DO NOT EDIT.
// Source: service/interface.go

// Package service is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	krogo "github.com/krogertechnology/krogo/pkg/krogo"
	model "github.com/nitesh-zs/bookshelf-api/model"
)

// MockUserSvc is a mock of UserSvc interface.
type MockUserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockUserSvcMockRecorder
}

// MockUserSvcMockRecorder is the mock recorder for MockUserSvc.
type MockUserSvcMockRecorder struct {
	mock *MockUserSvc
}

// NewMockUserSvc creates a new mock instance.
func NewMockUserSvc(ctrl *gomock.Controller) *MockUserSvc {
	mock := &MockUserSvc{ctrl: ctrl}
	mock.recorder = &MockUserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSvc) EXPECT() *MockUserSvcMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserSvc) Create(ctx *krogo.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserSvcMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserSvc)(nil).Create), ctx, user)
}

// Exists mocks base method.
func (m *MockUserSvc) Exists(ctx *krogo.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUserSvcMockRecorder) Exists(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserSvc)(nil).Exists), ctx, email)
}

// IsAdmin mocks base method.
func (m *MockUserSvc) IsAdmin(ctx *krogo.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockUserSvcMockRecorder) IsAdmin(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserSvc)(nil).IsAdmin), ctx, email)
}

// MockBookSvc is a mock of BookSvc interface.
type MockBookSvc struct {
	ctrl     *gomock.Controller
	recorder *MockBookSvcMockRecorder
}

// MockBookSvcMockRecorder is the mock recorder for MockBookSvc.
type MockBookSvcMockRecorder struct {
	mock *MockBookSvc
}

// NewMockBookSvc creates a new mock instance.
func NewMockBookSvc(ctrl *gomock.Controller) *MockBookSvc {
	mock := &MockBookSvc{ctrl: ctrl}
	mock.recorder = &MockBookSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookSvc) EXPECT() *MockBookSvcMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookSvc) Create(ctx *krogo.Context, book *model.Book, user *model.User) (*model.BookRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, book, user)
	ret0, _ := ret[0].(*model.BookRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookSvcMockRecorder) Create(ctx, book, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookSvc)(nil).Create), ctx, book, user)
}

// Delete mocks base method.
func (m *MockBookSvc) Delete(ctx *krogo.Context, id uuid.UUID, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookSvcMockRecorder) Delete(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookSvc)(nil).Delete), ctx, id, user)
}

// Get mocks base method.
func (m *MockBookSvc) Get(ctx *krogo.Context, page *model.Page, filters *model.Filters) ([]model.BookRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, page, filters)
	ret0, _ := ret[0].([]model.BookRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBookSvcMockRecorder) Get(ctx, page, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBookSvc)(nil).Get), ctx, page, filters)
}

// GetByID mocks base method.
func (m *MockBookSvc) GetByID(ctx *krogo.Context, id uuid.UUID) (*model.BookRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.BookRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookSvcMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookSvc)(nil).GetByID), ctx, id)
}

// GetFilters mocks base method.
func (m *MockBookSvc) GetFilters(ctx *krogo.Context, filter string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilters", ctx, filter)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilters indicates an expected call of GetFilters.
func (mr *MockBookSvcMockRecorder) GetFilters(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilters", reflect.TypeOf((*MockBookSvc)(nil).GetFilters), ctx, filter)
}

// Update mocks base method.
func (m *MockBookSvc) Update(ctx *krogo.Context, book *model.Book, user *model.User) (*model.BookRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, book, user)
	ret0, _ := ret[0].(*model.BookRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookSvcMockRecorder) Update(ctx, book, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookSvc)(nil).Update), ctx, book, user)
}
